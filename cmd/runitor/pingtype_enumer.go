// Code generated by "enumer -type PingType -trimprefix=PingType -transform=kebab"; DO NOT EDIT.

package main

import (
	"fmt"
)

const _PingTypeName = "exit-codesuccessfaillog"

var _PingTypeIndex = [...]uint8{0, 9, 16, 20, 23}

func (i PingType) String() string {
	if i < 0 || i >= PingType(len(_PingTypeIndex)-1) {
		return fmt.Sprintf("PingType(%d)", i)
	}
	return _PingTypeName[_PingTypeIndex[i]:_PingTypeIndex[i+1]]
}

var _PingTypeValues = []PingType{0, 1, 2, 3}

var _PingTypeNameToValueMap = map[string]PingType{
	_PingTypeName[0:9]:   0,
	_PingTypeName[9:16]:  1,
	_PingTypeName[16:20]: 2,
	_PingTypeName[20:23]: 3,
}

// PingTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PingTypeString(s string) (PingType, error) {
	if val, ok := _PingTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PingType values", s)
}

// PingTypeValues returns all values of the enum
func PingTypeValues() []PingType {
	return _PingTypeValues
}

// IsAPingType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PingType) IsAPingType() bool {
	for _, v := range _PingTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
