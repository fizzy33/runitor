#!/usr/bin/env bash
# Copyright 2020 - 2022, Berk D. Demir and the runitor contributors
# SPDX-License-Identifier: OBSD
set -euo pipefail

# Download a release from GitHub
#
# Arguments:
# - list: list release names
# - latest: download the latest non-prerelease release
# - vX.X.X: download release vX.X.X

PROJECT="bdd/runitor"
API_RELEASES="https://api.github.com/repos/${PROJECT}/releases"

rel="${1-}"
case "${rel}" in
  ls|list) rel="list" ;;
  latest) relpath="latest" ;;
  v*) relpath="tags/${rel}" ;;
  *)
    echo "usage: $0 list|latest|vX.X.X" >&2
    exit 64 # EX_USAGE
esac

if [[ ${rel} == "list" ]]; then
  curl -Ssf "${API_RELEASES}" | jq -r  '.[].tag_name'
  exit 0
fi

# Create a brace expansion URL list for curl from release asset download URLs.
# e.g. {url1,url2,url3,...}
asset_dl_urls_for_curl=$(
  curl -Ssf "${API_RELEASES}/${relpath}" \
    | jq -r '"{" + ([.assets[].browser_download_url] | join(",")) + "}"'
)

if [[ -z ${DOWNLOAD_DIR-} ]]; then
  DOWNLOAD_DIR="github-release-${rel}"
fi
curl -LOSsf \
  --output-dir "${DOWNLOAD_DIR}" \
  --create-dirs \
  "${asset_dl_urls_for_curl}"

# If release has a SHA256 file, verify the downloads as well.
if [[ -r ${DOWNLOAD_DIR}/SHA256.sig ]]; then
  verify="$(dirname "$0")/verify"
  if [[ -x ${verify} ]]; then
    "${verify}" "${DOWNLOAD_DIR}"
  fi
fi
